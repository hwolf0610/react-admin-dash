{"version":3,"sources":["views/Forms/ValidationForms/ValidationForms.js"],"names":["validationSchema","values","Yup","shape","firstName","min","required","lastName","userName","email","password","matches","confirmPassword","oneOf","accept","test","value","getErrorsFromValidationError","validationError","inner","reduce","errors","error","path","initialValues","onSubmit","setSubmitting","setErrors","setTimeout","alert","JSON","stringify","ValidationForms","props","touchAll","bind","formName","hasError","form","document","forms","i","length","name","focus","this","findFirstError","fieldName","Boolean","setTouched","validateForm","getValidationSchema","className","href","target","rel","validate","validateSync","abortEarly","render","touched","handleChange","status","dirty","handleBlur","handleSubmit","isSubmitting","isValid","handleReset","lg","noValidate","htmlFor","type","id","placeholder","autoComplete","valid","invalid","autoFocus","onChange","onBlur","md","variant","custom","color","disabled","onClick","React","Component"],"mappings":"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","file":"static/js/21.3757904e.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  CButton,\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CCol,\n  CForm,\n  CInvalidFeedback,\n  CInputCheckbox,\n  CFormGroup,\n  CLabel,\n  CInput,\n  CRow\n} from '@coreui/react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport './ValidationForms.css'\n\nconst validationSchema = function (values) {\n  return Yup.object().shape({\n    firstName: Yup.string()\n    .min(2, `First name has to be at least 2 characters`)\n    .required('First name is required'),\n    lastName: Yup.string()\n    .min(1, `Last name has to be at least 1 character`)\n    .required('Last name is required'),\n    userName: Yup.string()\n    .min(5, `Username has to be at least 5 characters`)\n    .required('Username is required'),\n    email: Yup.string()\n    .email('Invalid email address')\n    .required('Email is required!'),\n    password: Yup.string()\n    .min(6, `Password has to be at least ${6} characters!`)\n    .matches(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}/, 'Password must contain: numbers, uppercase and lowercase letters\\n')\n    .required('Password is required'),\n    confirmPassword: Yup.string()\n    .oneOf([values.password], 'Passwords must match')\n    .required('Password confirmation is required'),\n    accept: Yup.bool()\n    .required('* required')\n    .test('accept', 'You have to accept our Terms and Conditions!', value => value === true),\n  })\n}\n\nconst validate = (getValidationSchema) => {\n  return (values) => {\n    const validationSchema = getValidationSchema(values)\n    try {\n      validationSchema.validateSync(values, { abortEarly: false })\n      return {}\n    } catch (error) {\n      return getErrorsFromValidationError(error)\n    }\n  }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n  const FIRST_ERROR = 0\n  return validationError.inner.reduce((errors, error) => {\n    return {\n      ...errors,\n      [error.path]: error.errors[FIRST_ERROR],\n    }\n  }, {})\n}\n\nconst initialValues = {\n  firstName: \"\",\n  lastName: \"\",\n  userName: \"\",\n  email: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n  accept: false\n}\n\nconst onSubmit = (values, { setSubmitting, setErrors }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2))\n    // console.log('User has been successfully saved!', values)\n    setSubmitting(false)\n  }, 2000)\n}\n\nclass ValidationForms extends React.Component {\n  constructor(props){\n    super(props)\n    this.touchAll = this.touchAll.bind(this)\n\n  }\n\n  findFirstError (formName, hasError) {\n    const form = document.forms[formName]\n    for (let i = 0; i < form.length; i++) {\n      if (hasError(form[i].name)) {\n        form[i].focus()\n        break\n      }\n    }\n  }\n\n  validateForm (errors) {\n    this.findFirstError('simpleForm', (fieldName) => {\n      return Boolean(errors[fieldName])\n    })\n  }\n\n  touchAll(setTouched, errors) {\n    setTouched({\n        firstName: true,\n        lastName: true,\n        userName: true,\n        email: true,\n        password: true,\n        confirmPassword: true,\n        accept: true\n      }\n    )\n    this.validateForm(errors)\n  }\n\n  render() {\n    return (\n      <div className=\"animated fadeIn\">\n        <CCard>\n          <CCardHeader>\n            Form Validation\n            <a href=\"https://coreui.io/pro/react/\" className=\"badge badge-danger ml-1\">CoreUI Pro Component</a>\n            <div className=\"card-header-actions\">\n              <a className=\"card-header-action\" href=\"https://github.com/jaredpalmer/formik\" target=\"_blank\" rel=\"noreferrer noopener\">\n                <small className=\"text-muted\">docs</small>\n              </a>\n            </div>\n          </CCardHeader>\n          <CCardBody>\n            <a href=\"https://github.com/jaredpalmer/formik\" target=\"_blank\" rel=\"noreferrer noopener\">Formik</a> <cite>Build forms in React, without the tears</cite> with <a href=\"https://github.com/jquense/yup\" target=\"_blank\" rel=\"noreferrer noopener\">Yup</a> <cite>Dead simple Object schema\n            validation</cite>\n            <hr />\n            <Formik\n              initialValues={initialValues}\n              validate={validate(validationSchema)}\n              onSubmit={onSubmit}\n              render={\n                ({\n                  values,\n                  errors,\n                  touched,\n                  status,\n                  dirty,\n                  handleChange,\n                  handleBlur,\n                  handleSubmit,\n                  isSubmitting,\n                  isValid,\n                  handleReset,\n                  setTouched\n                }) => (\n                  <CRow>\n                    <CCol lg=\"6\">\n                      <CForm onSubmit={handleSubmit} noValidate name='simpleForm'>\n                        <CFormGroup>\n                          <CLabel htmlFor=\"firstName\">First Name</CLabel>\n                          <CInput type=\"text\"\n                                 name=\"firstName\"\n                                 id=\"firstName\"\n                                 placeholder=\"First Name\"\n                                 autoComplete=\"given-name\"\n                                 valid={!errors.firstName}\n                                 invalid={touched.firstName && !!errors.firstName}\n                                 autoFocus={true}\n                                 required\n                                 onChange={handleChange}\n                                 onBlur={handleBlur}\n                                 value={values.firstName} />\n                          <CInvalidFeedback>{errors.firstName}</CInvalidFeedback>\n                        </CFormGroup>\n                        <CFormGroup>\n                          <CLabel htmlFor=\"lastName\">Last Name</CLabel>\n                          <CInput type=\"text\"\n                                 name=\"lastName\"\n                                 id=\"lastName\"\n                                 placeholder=\"Last Name\"\n                                 autoComplete=\"family-name\"\n                                 valid={!errors.lastName}\n                                 invalid={touched.lastName && !!errors.lastName}\n                                 required\n                                 onChange={handleChange}\n                                 onBlur={handleBlur}\n                                 value={values.lastName} />\n                          <CInvalidFeedback>{errors.lastName}</CInvalidFeedback>\n                        </CFormGroup>\n                        <CFormGroup>\n                          <CLabel htmlFor=\"userName\">User Name</CLabel>\n                          <CInput type=\"text\"\n                                 name=\"userName\"\n                                 id=\"userName\"\n                                 placeholder=\"User Name\"\n                                 autoComplete=\"username\"\n                                 valid={!errors.userName}\n                                 invalid={touched.userName && !!errors.userName}\n                                 required\n                                 onChange={handleChange}\n                                 onBlur={handleBlur}\n                                 value={values.userName} />\n                          <CInvalidFeedback>{errors.userName}</CInvalidFeedback>\n                        </CFormGroup>\n                        <CFormGroup>\n                          <CLabel htmlFor=\"email\">Email</CLabel>\n                          <CInput type=\"email\"\n                                 name=\"email\"\n                                 id=\"email\"\n                                 placeholder=\"Email\"\n                                 autoComplete=\"email\"\n                                 valid={!errors.email}\n                                 invalid={touched.email && !!errors.email}\n                                 required\n                                 onChange={handleChange}\n                                 onBlur={handleBlur}\n                                 value={values.email} />\n                          <CInvalidFeedback>{errors.email}</CInvalidFeedback>\n                        </CFormGroup>\n                        <CRow>\n                          <CCol md={6}>\n                            <CFormGroup>\n                              <CLabel htmlFor=\"password\">Password</CLabel>\n                              <CInput type=\"password\"\n                                     name=\"password\"\n                                     id=\"password\"\n                                     placeholder=\"Password\"\n                                     autoComplete=\"new-password\"\n                                     valid={!errors.password}\n                                     invalid={touched.password && !!errors.password}\n                                     required\n                                     onChange={handleChange}\n                                     onBlur={handleBlur}\n                                     value={values.password} />\n                              {/*<CInvalidFeedback>Required password containing at least: number, uppercase and lowercase letter, 8 characters</CInvalidFeedback>*/}\n                              <CInvalidFeedback>{errors.password}</CInvalidFeedback>\n                            </CFormGroup>\n                          </CCol>\n                          <CCol md={6}>\n                            <CFormGroup>\n                              <CLabel htmlFor=\"confirmPassword\">Password</CLabel>\n                              <CInput type=\"password\"\n                                     name=\"confirmPassword\"\n                                     id=\"confirmPassword\"\n                                     placeholder=\"Confirm password\"\n                                     autoComplete=\"new-password\"\n                                     valid={!errors.confirmPassword}\n                                     invalid={touched.confirmPassword && !!errors.confirmPassword}\n                                     required\n                                     onChange={handleChange}\n                                     onBlur={handleBlur}\n                                     value={values.confirmPassword} />\n                              <CInvalidFeedback>{errors.confirmPassword}</CInvalidFeedback>\n                            </CFormGroup>\n                          </CCol>\n                        </CRow>\n                        <CFormGroup variant=\"custom-checkbox\" className=\"pb-3\">\n                          <CInputCheckbox\n                            custom\n                            id=\"accept\"\n                            required\n                            valid={!errors.accept}\n                            invalid={touched.accept && !!errors.accept}\n                            onChange={handleChange}\n                            onBlur={handleBlur} \n                          />\n                          <CLabel variant=\"custom-checkbox\" htmlFor=\"accept\">\n                            I accept the terms of use\n                          </CLabel>\n                          <CInvalidFeedback>{errors.accept}</CInvalidFeedback>\n                        </CFormGroup>\n                        <CFormGroup>\n                          <CButton type=\"submit\" color=\"primary\" className=\"mr-1\" disabled={isSubmitting || !isValid}>{isSubmitting ? 'Wait...' : 'Submit'}</CButton>\n                          <CButton type=\"button\" color=\"success\" className=\"mr-1\" onClick={() => this.touchAll(setTouched, errors)}  disabled={isValid}>Validate</CButton>\n                          <CButton type=\"reset\" color=\"danger\" className=\"mr-1\" onClick={handleReset}>Reset</CButton>\n                        </CFormGroup>\n                      </CForm>\n                    </CCol>\n                    <CCol lg=\"6\">\n                      <CCard color={isValid ? 'gradient-info' : 'gradient-secondary'}>\n                        <CCardBody>\n                          <pre>values: {JSON.stringify(values, null, 2)}</pre>\n                          <pre>errors: {JSON.stringify(errors, null, 2)}</pre>\n                          <pre>touched: {JSON.stringify(touched, null, 2)}</pre>\n                        </CCardBody>\n                      </CCard>\n                    </CCol>\n                  </CRow>\n                )} />\n          </CCardBody>\n        </CCard>\n      </div>\n    )\n  }\n}\n\nexport default ValidationForms;\n"],"sourceRoot":""}