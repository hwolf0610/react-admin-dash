{"version":3,"sources":["views/Notifications/Toaster/Toaster.js"],"names":["Toaster","props","addToast","bind","state","toasts","position","autohide","autohideValue","closeButton","fade","positions","this","push","toastConfig","setState","toasters","reduce","toast","className","sm","lg","variant","id","checked","onChange","custom","htmlFor","type","value","e","Number","target","map","i","key","color","onClick","Object","keys","toasterKey","show","Component"],"mappings":"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","file":"static/js/70.c2a54c64.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CToast,\n  CToastBody,\n  CToastHeader,\n  CToaster,\n  CForm,\n  CInput,\n  CInputCheckbox,\n  CButton,\n  CContainer,\n  CRow,\n  CCol,\n  CFormGroup,\n  CLabel\n} from '@coreui/react'\n\nclass Toaster extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.addToast = this.addToast.bind(this)\n    this.state = {\n\n      toasts: [\n        { position: 'static'},\n        { position: 'static'},\n        { position: 'top-right', autohide: 3000 }\n      ],\n      autohide: true,\n      autohideValue: 5000,\n      closeButton: true,\n      fade: true,\n      position: 'top-right',\n      positions: [\n        'static',\n        'top-left',\n        'top-center',\n        'top-right',\n        'top-full',\n        'bottom-left',\n        'bottom-center',\n        'bottom-right',\n        'bottom-full'\n      ]\n    }\n  }\n\n  addToast() {\n    this.state.toasts.push(this.toastConfig)\n    this.setState({toasts: this.state.toasts})\n  }\n\n  render() {\n\n    this.toasters = (()=>{\n      return this.state.toasts.reduce((toasters, toast) => {\n        toasters[toast.position] = toasters[toast.position] || []\n        toasters[toast.position].push(toast)\n        return toasters\n      }, {})\n    })()\n\n    this.toastConfig = (()=>{\n      return {\n        autohide: this.state.autohide ? this.state.autohideValue : false,\n        closeButton: this.state.closeButton,\n        fade: this.state.fade,\n        position: this.state.position,\n      }\n    })()\n\n\n    return (\n      <div className=\"animated\">\n        <CCard>\n          <CCardHeader>\n            Toasts.\n          </CCardHeader>\n          <CCardBody>\n            <CContainer>\n              <CRow>\n                <CCol sm=\"12\" lg=\"6\">\n                  <CForm>\n                    <h5>Add toast with following props:</h5>\n\n                    <CFormGroup variant=\"custom-checkbox\" className=\"my-2 mt-4\">\n                      <CInputCheckbox\n                        id=\"autohide\"\n                        checked={this.state.autohide}\n                        onChange={()=>{this.setState({autohide: !this.state.autohide})}}\n                        custom\n                      />\n                      <CLabel variant=\"custom-checkbox\" htmlFor=\"autohide\">\n                        Autohide of the toast\n                      </CLabel>\n                    </CFormGroup>\n                    {\n                      this.state.autohide ?\n                        <CFormGroup className=\"my-2\">\n                          <CLabel htmlFor=\"ccyear\">Time to autohide</CLabel>\n                          <CInput\n                            type=\"number\"\n                            value={this.state.autohideValue}\n                            onChange={(e)=>{this.setState({\n                              autohideValue: Number(e.target.value)\n                            })}}\n                          />\n                        </CFormGroup> : null\n                    }\n\n                    <CFormGroup className=\"my-2\">\n                      <CLabel htmlFor=\"ccyear\">Position</CLabel>\n                      <select\n                        className=\"form-control\"\n                        value={this.state.position}\n                        onChange={(e)=>{this.setState({position: e.target.value})}}\n                      >\n                        {\n                          this.state.positions.map((position, i)=>(\n                            <option key={i}>{position}</option>\n                          ))\n                        }\n                      </select>\n                    </CFormGroup>\n\n                    <CFormGroup variant=\"custom-checkbox\" className=\"my-2\">\n                      <CInputCheckbox\n                        id=\"fade\"\n                        checked={this.state.fade}\n                        onChange={()=>{this.setState({fade: !this.state.fade})}}\n                        custom\n                      />\n                      <CLabel variant=\"custom-checkbox\" htmlFor=\"fade\">fade</CLabel>\n                    </CFormGroup>\n\n                    <CFormGroup variant=\"custom-checkbox\" className=\"my-2\">\n                      <CInputCheckbox\n                        id=\"close\"\n                        custom\n                        checked={this.state.closeButton}\n                        onChange={()=>{this.setState({closeButton: !this.state.closeButton})}}\n                      />\n                      <CLabel variant=\"custom-checkbox\" htmlFor=\"close\">closeButton</CLabel>\n                    </CFormGroup>\n\n                    <CButton\n                      className=\"mr-1 w-25\"\n                      color=\"success\"\n                      onClick={this.addToast}\n                    >\n                      Add toast\n                    </CButton>\n\n                  </CForm>\n                </CCol>\n                <CCol sm=\"12\" lg=\"6\">\n                  {Object.keys(this.toasters).map((toasterKey) => (\n                    <CToaster\n                      position={toasterKey}\n                      key={'toaster' + toasterKey}\n                    >\n                      {\n                      this.toasters[toasterKey].map((toast, key)=>{\n                        return(\n                          <CToast\n                            key={'toast' + key}\n                            show={true}\n                            autohide={toast.autohide}\n                            fade={toast.fade}\n                          >\n                            <CToastHeader closeButton={toast.closeButton}>\n                              Toast title\n                            </CToastHeader>\n                            <CToastBody>\n                              {`This is a toast in ${toasterKey} positioned toaster number ${key + 1}.`}\n                            </CToastBody>\n                          </CToast>\n                        )\n                      })\n                      }\n                    </CToaster>\n                  ))}\n                </CCol>\n              </CRow>\n            </CContainer>\n          </CCardBody>\n        </CCard>\n      </div>\n    )\n  }\n}\n\nexport default Toaster\n"],"sourceRoot":""}